{"version":3,"sources":["components/navbar/Navbar.js","components/img-result/ImgResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","AppBar_default","title","ImgResults","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","images","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","actions","FlatButton_default","label","promary","Dialog_default","modal","onRequestClose","alt","style","width","Component","PropTypes","array","isRequired","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","console","log","data","hits","catch","err","onAmountChange","index","searchStyle","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","img_result_ImgResults","margin","App","MuiThemeProvider_default","containerStyle","navbar_Navbar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0111892b.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from 'material-ui/AppBar';\r\n\r\n\r\nconst Navbar = () => <AppBar title=\"Pixabay Image finder\" /> \r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GridList, GridTile } from 'material-ui/GridList';\r\nimport IconBtn from 'material-ui/IconButton';\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatBtn from 'material-ui/FlatButton';\r\n\r\n\r\nclass ImgResults extends Component {\r\n\tstate = {\r\n\t\topen: false,\r\n\t\tcurrentImg: ''\r\n\t}\r\n\r\n\thandleOpen = img => {\r\n\t\tthis.setState({ open: true, currentImg: img });\r\n\t}\r\n\r\n\thandleClose = () => {\r\n\t\tthis.setState({ open: false });\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet imageListContent;\r\n\t\tconst { images } = this.props;\r\n\t\tif(images) {\r\n\t\t\timageListContent = (\r\n\t\t\t\t<GridList cols={3}>\r\n\t\t\t\t\t{ images.map(img => (\r\n\t\t\t\t\t\t<GridTile\r\n\t\t\t\t\t\t\ttitle={img.tags}\r\n\t\t\t\t\t\t\tkey={img.id}\r\n\t\t\t\t\t\t\tsubtitle={\r\n\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\tby <strong>{img.user}</strong>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tactionIcon={\r\n\t\t\t\t\t\t\t\t<IconBtn onClick={ () => this.handleOpen(img.largeImageURL) }>\r\n\t\t\t\t\t\t\t\t\t<ZoomIn color=\"white\" />\r\n\t\t\t\t\t\t\t\t</IconBtn>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<img src={img.largeImageURL} />\r\n\t\t\t\t\t\t</GridTile>\r\n\t\t\t\t\t ))}\r\n\t\t\t\t</GridList>\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\timageListContent = null;\r\n\t\t}\r\n\t\tconst actions = [\r\n\t\t\t<FlatBtn label=\"Close\" promary={true} onClick={this.handleClose} />\r\n\t\t]\r\n\r\n\t\treturn <div>\r\n\t\t\t{imageListContent}\r\n\t\t\t<Dialog \r\n\t\t\t\tactions={actions}\r\n\t\t\t\tmodal={false}\r\n\t\t\t\topen={this.state.open}\r\n\t\t\t\tonRequestClose={this.handleClose}\r\n\t\t\t>\r\n\t\t\t\t<img src={this.state.currentImg} alt=\"\" style={{ width: '1000' }} />\r\n\t\t\t</Dialog>\r\n\t\t</div>;\r\n\t}\r\n}\r\nImgResults.PropTypes = {\r\n\timages: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ImgResults;","import React, { Component } from 'react';\r\nimport TextField from 'material-ui/TextField';\r\nimport SelectField from 'material-ui/SelectField';\r\nimport MenuItem from 'material-ui/MenuItem';\r\nimport axios from 'axios';\r\nimport ImgResults from '../img-result/ImgResults';\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        searchText: '',\r\n        amount: 15,\r\n        apiUrl: 'https://pixabay.com/api',\r\n        apiKey: '11272620-662376d32f6b976c3a3ee94c5',\r\n        images: []\r\n    };\r\n\r\n    onTextChange = (e) => {\r\n        const val = e.target.value\r\n        this.setState({ [e.target.name]: val}, () => {\r\n            if(val === '') {\r\n                this.setState({ images: [] })\r\n            }else {\r\n             axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n            .then(res => {\r\n                console.log(res.data)\r\n                this.setState({images: res.data.hits})})\r\n            .catch(err => console.log(err));\r\n            }\r\n        });\r\n    };\r\n\r\n    onAmountChange = (e, index, value) => {\r\n        // console.log(value);\r\n        this.setState({amount: value});\r\n    }   \r\n\r\n  render() {\r\n    // console.log(this.state);\r\n    return (\r\n    \t<div style={ searchStyle } >\r\n            <TextField \r\n                name=\"searchText\"\r\n                value={this.state.searchText}\r\n                onChange={this.onTextChange}\r\n                floatingLabelText=\"Search For Images\"\r\n                fullWidth={true}\r\n            />\r\n            <br/>\r\n            <SelectField\r\n                name=\"amount\"\r\n                floatingLabelText=\"Amount\"\r\n                value={this.state.amount}\r\n                onChange={this.onAmountChange}\r\n            >\r\n                <MenuItem value={5} primaryText=\"5\" />\r\n                <MenuItem value={10} primaryText=\"10\" />\r\n                <MenuItem value={15} primaryText=\"15\" />   \r\n                <MenuItem value={30} primaryText=\"30\" />   \r\n                <MenuItem value={50} primaryText=\"50\" />   \r\n            </SelectField>\r\n            <br/>\r\n            {this.state.images.length > 0 ? (<ImgResults images={this.state.images}/>) : null}\r\n        </div>\r\n    );\r\n  }\r\n}\r\nconst searchStyle = {\r\n    width: '90%',\r\n    margin:'0 auto'\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Navbar from './components/navbar/Navbar';\nimport Search from './components/search/Search.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n    \t<MuiThemeProvider>\n    \t\t<div style={ containerStyle }> \n    \t\t\t<Navbar />\n    \t\t\t<Search />\n    \t\t</div>\n    \t</MuiThemeProvider>\n    );\n  }\n}\nconst containerStyle = {\n    width: '80%',\n    margin: '0 auto',\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}